name: Windows (Luajit)

on:
  pull_request:
  push:
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-2019, windows-2022]
        arch: [x64, x86]

    runs-on: ${{ matrix.os }}

    concurrency:
        group: ${{ github.ref }}-${{ github.base_ref }}-${{ github.head_ref }}-${{ matrix.os }}-${{ matrix.arch }}-Windows-Luajit
        cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
        with:
          # WyriHaximus/github-action-get-previous-tag@master need it
          fetch-depth: 0
          submodules: true
      - uses: xmake-io/github-action-setup-xmake@v1
        with:
          # this is not supported, use dev branch instead
          # xmake-version: local#
          xmake-version: branch@dev
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: dmd-latest
      - uses: little-core-labs/get-git-tag@v3.0.2
        id: tagName

      - name: Set release arch name
        run: |
          if ("${{ matrix.arch }}" -eq "x64") {
            Write-Output "RELEASE_NAME=win64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
          } elseif ("${{ matrix.arch }}" -eq "arm64") {
            Write-Output "RELEASE_NAME=arm64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
          } else {
            Write-Output "RELEASE_NAME=win32" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
          }

      - name: Build
        run: |
          cd core
          xmake f -vD -a ${{ matrix.arch }} --runtime=luajit
          xmake -vD
          cd ..

      - name: Artifact
        run: |
          cd core
          xrepo update-repo
          xmake pack -vD -y --formats=nsis,zip --autobuild=n -o ../artifacts/${{env.RELEASE_NAME}} --basename=xmake xmake
          (Get-FileHash ../artifacts/${{env.RELEASE_NAME}}/xmake.zip -Algorithm SHA256).Hash.ToLower() + " *xmake.zip`n" | Out-File ./shafile -Encoding ASCII -NoNewLine -Append
          Copy-Item shafile ../artifacts/${{env.RELEASE_NAME}}
          cd ..

      - name: Tests
        run: |
          Copy-Item ./core/build/xmake.exe ./xmake
          Copy-Item ./scripts/xrepo.bat ./xmake
          Copy-Item ./scripts/xrepo.ps1 ./xmake
          $Env:XMAKE_PROGRAM_DIR = $(Resolve-Path ./xmake)
          Set-Item -Path Env:Path -Value ($Env:XMAKE_PROGRAM_DIR + ";" + $Env:Path)
          xrepo --version
          xmake show
          xmake lua -v -D tests/run.lua

        # upload artifacts
      - name: Upload artifacts (exe)
        if: matrix.os == 'windows-2022'
        uses: actions/upload-artifact@v4
        with:
          name: xmake-latest.${{env.RELEASE_NAME}}.exe
          path: artifacts/${{env.RELEASE_NAME}}/xmake.exe

      - name: Upload artifacts (zip)
        if: matrix.os == 'windows-2022'
        uses: actions/upload-artifact@v4
        with:
          name: xmake-latest.${{ env.RELEASE_NAME }}.zip
          path: artifacts/${{env.RELEASE_NAME}}/xmake.zip

      - name: Upload artifacts (sha256)
        if: matrix.os == 'windows-2022'
        uses: actions/upload-artifact@v4
        with:
          name: xmake-latest.${{ env.RELEASE_NAME }}.sha256
          path: artifacts/${{env.RELEASE_NAME}}/shafile
